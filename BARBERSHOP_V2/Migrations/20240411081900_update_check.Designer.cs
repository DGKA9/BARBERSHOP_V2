// <auto-generated />
using System;
using BARBERSHOP_V2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BARBERSHOP_V2.Migrations
{
    [DbContext(typeof(BarberShopContext))]
    [Migration("20240411081900_update_check")]
    partial class update_check
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Address", b =>
                {
                    b.Property<int>("addressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("addressID"), 1L, 1);

                    b.Property<int>("cityID")
                        .HasColumnType("int");

                    b.Property<string>("currentAddress")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("district")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("subDistrict")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("addressID");

                    b.HasIndex("cityID");

                    b.HasIndex("currentAddress", "subDistrict", "district")
                        .IsUnique()
                        .HasFilter("[currentAddress] IS NOT NULL AND [subDistrict] IS NOT NULL AND [district] IS NOT NULL");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Booking", b =>
                {
                    b.Property<int>("bookingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bookingID"), 1L, 1);

                    b.Property<int>("customerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateFounded")
                        .HasColumnType("datetime2");

                    b.Property<int?>("employeeID")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("endTime")
                        .HasColumnType("time");

                    b.Property<string>("note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("startDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("startTime")
                        .HasColumnType("time");

                    b.Property<int>("storeID")
                        .HasColumnType("int");

                    b.HasKey("bookingID");

                    b.HasIndex("customerID");

                    b.HasIndex("employeeID");

                    b.HasIndex("storeID");

                    b.ToTable("Bookings");

                    b.HasCheckConstraint("CK_Booking_StartDate_DateFounded", "startDate >= dateFounded");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.BookingService", b =>
                {
                    b.Property<int>("bookingID")
                        .HasColumnType("int");

                    b.Property<int>("serID")
                        .HasColumnType("int");

                    b.Property<int?>("employeeID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("bookingID", "serID");

                    b.HasIndex("employeeID");

                    b.HasIndex("serID");

                    b.ToTable("BookingsService");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.BookingStateDescription", b =>
                {
                    b.Property<int>("stateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("stateID"), 1L, 1);

                    b.Property<int>("bookingID")
                        .HasColumnType("int");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("stateID");

                    b.HasIndex("bookingID")
                        .IsUnique();

                    b.ToTable("BookingStateDescription");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Category", b =>
                {
                    b.Property<int>("cateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cateID"), 1L, 1);

                    b.Property<string>("cateName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("cateID");

                    b.HasIndex("cateName")
                        .IsUnique()
                        .HasFilter("[cateName] IS NOT NULL");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.City", b =>
                {
                    b.Property<int>("cityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cityID"), 1L, 1);

                    b.Property<string>("cityName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("countryID")
                        .HasColumnType("int");

                    b.HasKey("cityID");

                    b.HasIndex("cityName")
                        .IsUnique()
                        .HasFilter("[cityName] IS NOT NULL");

                    b.HasIndex("countryID");

                    b.ToTable("City");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Country", b =>
                {
                    b.Property<int>("countryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("countryID"), 1L, 1);

                    b.Property<string>("countryName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("countryID");

                    b.HasIndex("countryName")
                        .IsUnique()
                        .HasFilter("[countryName] IS NOT NULL");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Customer", b =>
                {
                    b.Property<int>("customerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("customerID"), 1L, 1);

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("numberphone")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.HasKey("customerID");

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("numberphone")
                        .IsUnique();

                    b.HasIndex("userID")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.CustomerAddress", b =>
                {
                    b.Property<int>("cusAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cusAddressId"), 1L, 1);

                    b.Property<int>("addressID")
                        .HasColumnType("int");

                    b.Property<int>("customerID")
                        .HasColumnType("int");

                    b.HasKey("cusAddressId");

                    b.HasIndex("addressID");

                    b.HasIndex("customerID", "addressID")
                        .IsUnique();

                    b.ToTable("CustomerAddress");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.CustomerNotification", b =>
                {
                    b.Property<int>("cNotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("cNotificationID"), 1L, 1);

                    b.Property<int>("customerID")
                        .HasColumnType("int");

                    b.Property<int>("notiID")
                        .HasColumnType("int");

                    b.HasKey("cNotificationID");

                    b.HasIndex("customerID");

                    b.HasIndex("notiID");

                    b.ToTable("CustomerNotification");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Employee", b =>
                {
                    b.Property<int>("employeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("employeeID"), 1L, 1);

                    b.Property<int>("addressID")
                        .HasColumnType("int");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("firstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("lastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("numberphone")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("storeID")
                        .HasColumnType("int");

                    b.Property<int>("userID")
                        .HasColumnType("int");

                    b.Property<DateTime>("wordDay")
                        .HasColumnType("datetime2");

                    b.HasKey("employeeID");

                    b.HasIndex("addressID");

                    b.HasIndex("email")
                        .IsUnique();

                    b.HasIndex("numberphone")
                        .IsUnique();

                    b.HasIndex("storeID");

                    b.HasIndex("userID")
                        .IsUnique();

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Evaluate", b =>
                {
                    b.Property<int>("evaluateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("evaluateID"), 1L, 1);

                    b.Property<string>("comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("customerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("lastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("rating")
                        .HasColumnType("int");

                    b.Property<int>("storeID")
                        .HasColumnType("int");

                    b.HasKey("evaluateID");

                    b.HasIndex("customerID");

                    b.HasIndex("storeID");

                    b.ToTable("Evaluate");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.LocationStore", b =>
                {
                    b.Property<int>("locationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("locationID"), 1L, 1);

                    b.Property<int>("cityID")
                        .HasColumnType("int");

                    b.Property<string>("currentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("district")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("storeID")
                        .HasColumnType("int");

                    b.Property<string>("subDistrict")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("locationID");

                    b.HasIndex("cityID");

                    b.HasIndex("storeID");

                    b.ToTable("LocationStore");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Notification", b =>
                {
                    b.Property<int>("notiID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("notiID"), 1L, 1);

                    b.Property<DateTime>("lastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("notiContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("notiTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("notiID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Order", b =>
                {
                    b.Property<int>("orderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("orderID"), 1L, 1);

                    b.Property<int>("customerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("deliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("orderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("orderStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("payID")
                        .HasColumnType("int");

                    b.Property<int>("totalInvoice")
                        .HasColumnType("int");

                    b.HasKey("orderID");

                    b.HasIndex("customerID");

                    b.HasIndex("payID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Payment", b =>
                {
                    b.Property<int>("payID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("payID"), 1L, 1);

                    b.Property<string>("payMethod")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("payStatus")
                        .HasColumnType("bit");

                    b.HasKey("payID");

                    b.HasIndex("payMethod")
                        .IsUnique()
                        .HasFilter("[payMethod] IS NOT NULL");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Producer", b =>
                {
                    b.Property<int>("producerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("producerID"), 1L, 1);

                    b.Property<int>("addressID")
                        .HasColumnType("int");

                    b.Property<string>("numberphone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("producerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("producerID");

                    b.HasIndex("addressID")
                        .IsUnique();

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Product", b =>
                {
                    b.Property<int>("proID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("proID"), 1L, 1);

                    b.Property<int>("cateID")
                        .HasColumnType("int");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<string>("proDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("proImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("proName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("producerID")
                        .HasColumnType("int");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("warehouseID")
                        .HasColumnType("int");

                    b.HasKey("proID");

                    b.HasIndex("cateID");

                    b.HasIndex("producerID");

                    b.HasIndex("warehouseID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.ProductOrder", b =>
                {
                    b.Property<int>("proOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("proOrderID"), 1L, 1);

                    b.Property<int>("orderID")
                        .HasColumnType("int");

                    b.Property<int>("proID")
                        .HasColumnType("int");

                    b.Property<int>("proOrderQuantity")
                        .HasColumnType("int");

                    b.HasKey("proOrderID");

                    b.HasIndex("orderID");

                    b.HasIndex("proID");

                    b.ToTable("ProductOrder");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Role", b =>
                {
                    b.Property<int>("roleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("roleID"), 1L, 1);

                    b.Property<string>("roleName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("roleID");

                    b.HasIndex("roleName")
                        .IsUnique()
                        .HasFilter("[roleName] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.ServiceCategory", b =>
                {
                    b.Property<int>("serCateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("serCateID"), 1L, 1);

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("serCateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("serCateID");

                    b.ToTable("ServiceCategories");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.ServiceEmployee", b =>
                {
                    b.Property<int>("employeeID")
                        .HasColumnType("int");

                    b.Property<int>("serID")
                        .HasColumnType("int");

                    b.HasKey("employeeID", "serID");

                    b.HasIndex("serID");

                    b.ToTable("ServicesEmployee");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.ServiceManagement", b =>
                {
                    b.Property<int>("serManagerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("serManagerID"), 1L, 1);

                    b.Property<int>("serID")
                        .HasColumnType("int");

                    b.Property<int>("storeID")
                        .HasColumnType("int");

                    b.HasKey("serManagerID");

                    b.HasIndex("serID");

                    b.HasIndex("storeID");

                    b.ToTable("ServiceManagement");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Services", b =>
                {
                    b.Property<int>("serID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("serID"), 1L, 1);

                    b.Property<int>("serCateID")
                        .HasColumnType("int");

                    b.Property<string>("serDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("serName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("serPrice")
                        .HasColumnType("real");

                    b.Property<TimeSpan>("serTime")
                        .HasColumnType("time");

                    b.HasKey("serID");

                    b.HasIndex("serCateID");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Store", b =>
                {
                    b.Property<int>("storeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("storeID"), 1L, 1);

                    b.Property<string>("numberphone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("storeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("workingHourID")
                        .HasColumnType("int");

                    b.HasKey("storeID");

                    b.HasIndex("workingHourID");

                    b.ToTable("Stores");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.User", b =>
                {
                    b.Property<int>("userID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("userID"), 1L, 1);

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("roleID")
                        .HasColumnType("int");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("userID");

                    b.HasIndex("roleID");

                    b.HasIndex("userName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasCheckConstraint("CK_userName_no_whitespace", "CHARINDEX(' ', userName) = 0");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Warehouse", b =>
                {
                    b.Property<int>("warehouseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("warehouseID"), 1L, 1);

                    b.Property<int>("addressID")
                        .HasColumnType("int");

                    b.Property<int>("capacity")
                        .HasColumnType("int");

                    b.Property<int>("storeID")
                        .HasColumnType("int");

                    b.Property<float>("totalAsset")
                        .HasColumnType("real");

                    b.Property<string>("warehouseName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("warehouseID");

                    b.HasIndex("addressID")
                        .IsUnique();

                    b.HasIndex("storeID");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.WorkingHour", b =>
                {
                    b.Property<int>("workingHourID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("workingHourID"), 1L, 1);

                    b.Property<TimeSpan>("endTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("startTime")
                        .HasColumnType("time");

                    b.HasKey("workingHourID");

                    b.ToTable("WorkingHours");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Address", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.City", "city")
                        .WithMany("addresses")
                        .HasForeignKey("cityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("city");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Booking", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.Customer", "customer")
                        .WithMany("Bookings")
                        .HasForeignKey("customerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BARBERSHOP_V2.Entity.Employee", null)
                        .WithMany("Bookings")
                        .HasForeignKey("employeeID");

                    b.HasOne("BARBERSHOP_V2.Entity.Store", "Store")
                        .WithMany("Bookings")
                        .HasForeignKey("storeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.BookingService", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.Booking", "Booking")
                        .WithMany("BookingServices")
                        .HasForeignKey("bookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BARBERSHOP_V2.Entity.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("employeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BARBERSHOP_V2.Entity.Services", "Service")
                        .WithMany("BookingServices")
                        .HasForeignKey("serID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Employee");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.BookingStateDescription", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.Booking", "Booking")
                        .WithOne("BookingSateDescription")
                        .HasForeignKey("BARBERSHOP_V2.Entity.BookingStateDescription", "bookingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.City", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.Country", "country")
                        .WithMany("city")
                        .HasForeignKey("countryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("country");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Customer", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("BARBERSHOP_V2.Entity.Customer", "userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.CustomerAddress", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.Address", "Address")
                        .WithMany("customers")
                        .HasForeignKey("addressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BARBERSHOP_V2.Entity.Customer", "Customer")
                        .WithMany("addresses")
                        .HasForeignKey("customerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.CustomerNotification", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.Customer", "Customer")
                        .WithMany("CustomerNotifications")
                        .HasForeignKey("customerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BARBERSHOP_V2.Entity.Notification", "Notification")
                        .WithMany("customerNotifications")
                        .HasForeignKey("notiID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Employee", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.Address", "Address")
                        .WithMany("Employees")
                        .HasForeignKey("addressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BARBERSHOP_V2.Entity.Store", "Store")
                        .WithMany("employees")
                        .HasForeignKey("storeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BARBERSHOP_V2.Entity.User", "user")
                        .WithOne("Employee")
                        .HasForeignKey("BARBERSHOP_V2.Entity.Employee", "userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Store");

                    b.Navigation("user");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Evaluate", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.Customer", "customer")
                        .WithMany("Evaluations")
                        .HasForeignKey("customerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BARBERSHOP_V2.Entity.Store", "store")
                        .WithMany("evaluates")
                        .HasForeignKey("storeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("store");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.LocationStore", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.City", "city")
                        .WithMany("cities")
                        .HasForeignKey("cityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BARBERSHOP_V2.Entity.Store", "Store")
                        .WithMany("locationStore")
                        .HasForeignKey("storeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");

                    b.Navigation("city");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Order", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.Customer", "customer")
                        .WithMany("Orders")
                        .HasForeignKey("customerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BARBERSHOP_V2.Entity.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("payID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("customer");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Producer", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.Address", "Address")
                        .WithOne("Producer")
                        .HasForeignKey("BARBERSHOP_V2.Entity.Producer", "addressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Product", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.Category", "category")
                        .WithMany("products")
                        .HasForeignKey("cateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BARBERSHOP_V2.Entity.Producer", "Producer")
                        .WithMany("Product")
                        .HasForeignKey("producerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BARBERSHOP_V2.Entity.Warehouse", "Warehouse")
                        .WithMany("products")
                        .HasForeignKey("warehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");

                    b.Navigation("Warehouse");

                    b.Navigation("category");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.ProductOrder", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.Order", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("orderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BARBERSHOP_V2.Entity.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("proID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.ServiceEmployee", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.Employee", "Employee")
                        .WithMany("ServiceEmployee")
                        .HasForeignKey("employeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BARBERSHOP_V2.Entity.Services", "Services")
                        .WithMany("ServiceEmployee")
                        .HasForeignKey("serID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.ServiceManagement", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.Services", "Service")
                        .WithMany("ServiceManagement")
                        .HasForeignKey("serID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BARBERSHOP_V2.Entity.Store", "Store")
                        .WithMany("serviceManagement")
                        .HasForeignKey("storeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Services", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.ServiceCategory", "ServiceCategory")
                        .WithMany("services")
                        .HasForeignKey("serCateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Store", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.WorkingHour", "workingHour")
                        .WithMany("stores")
                        .HasForeignKey("workingHourID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("workingHour");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.User", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.Role", "Role")
                        .WithMany("users")
                        .HasForeignKey("roleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Warehouse", b =>
                {
                    b.HasOne("BARBERSHOP_V2.Entity.Address", "Address")
                        .WithOne("Warehouse")
                        .HasForeignKey("BARBERSHOP_V2.Entity.Warehouse", "addressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BARBERSHOP_V2.Entity.Store", "Store")
                        .WithMany("warehouse")
                        .HasForeignKey("storeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Address", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Producer");

                    b.Navigation("Warehouse");

                    b.Navigation("customers");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Booking", b =>
                {
                    b.Navigation("BookingSateDescription");

                    b.Navigation("BookingServices");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Category", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.City", b =>
                {
                    b.Navigation("addresses");

                    b.Navigation("cities");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Country", b =>
                {
                    b.Navigation("city");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Customer", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("CustomerNotifications");

                    b.Navigation("Evaluations");

                    b.Navigation("Orders");

                    b.Navigation("addresses");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Employee", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("ServiceEmployee");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Notification", b =>
                {
                    b.Navigation("customerNotifications");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Order", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Producer", b =>
                {
                    b.Navigation("Product");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Product", b =>
                {
                    b.Navigation("ProductOrders");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Role", b =>
                {
                    b.Navigation("users");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.ServiceCategory", b =>
                {
                    b.Navigation("services");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Services", b =>
                {
                    b.Navigation("BookingServices");

                    b.Navigation("ServiceEmployee");

                    b.Navigation("ServiceManagement");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Store", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("employees");

                    b.Navigation("evaluates");

                    b.Navigation("locationStore");

                    b.Navigation("serviceManagement");

                    b.Navigation("warehouse");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.Warehouse", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("BARBERSHOP_V2.Entity.WorkingHour", b =>
                {
                    b.Navigation("stores");
                });
#pragma warning restore 612, 618
        }
    }
}
